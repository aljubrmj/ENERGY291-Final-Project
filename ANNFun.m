function [Y,Xf,Af] = ANNFun(X,~,~)
% ANNFUN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-Feb-2019 01:37:32.
% 
% [Y] = ANNFun(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [2 3 4];
x1_step2.xoffset = [0;0;0];
x1_step2.gain = [2000;2000;2000];
x1_step2.ymin = -1;

% Layer 1
b1 = [0.50781688196999474894;-0.9758537297413332201;-0.2953244614302775739;-0.34152228732060008198;-1.1034034192153143739;-4.365715098276284678;-0.059374094261387393157;1.0675621200617975148;4.2678925059985530766;-4.52244863891304405];
IW1_1 = [-0.72522254136704167315 -0.215326106447499388 0.093290365952395717941;0.081862746142595990695 0.0536029183235311249 0.0057802362750163987712;0.38615248617839448286 0.417986201760577325 0.23545829594040365573;-0.019472616376161964308 0.49425942489472363128 -0.32073146433486948714;0.10692674567338987524 0.38900505731290929701 0.082540990768502256469;-3.8531614422840823053 0.00029550826547119585187 -0.027554284521540232944;0.058691224823792312315 0.2695946474462814213 -0.59622279611308004466;0.14762593837941334618 0.82113826837355763377 0.92407520486292915596;0.016787112504683673192 3.7316864094301531729 -0.031053896861280582548;-0.071827580701805296415 -0.085213398535966017322 -3.9214367788284247851];

% Layer 2
b2 = [-1.068010833990081343;-2.1109640716004758332];
LW2_1 = [0.12598712811692339142 1.2534771237879798189 0.082790657763311792383 -0.23052242344072937374 0.15474540620854473905 -0.87689740221691037103 0.16883454727313026988 0.083426347495625524653 1.0079680711363716572 -1.0389610671270124165;0.63047325143482957355 1.5356256844665052697 0.52445226206404205183 -1.7592266765709361209 1.6128067508871439806 -1.4193649725144124041 1.3568409350056027662 0.43920234258592211196 1.5601052233097909561 -1.5065519640289770642];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.34501976170285e-06;1.02157782296341e-06];
y1_step1.xoffset = [1108059;47617.11];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
