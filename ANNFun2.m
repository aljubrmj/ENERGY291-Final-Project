function [Y,Xf,Af] = ANNFun2(X,~,~)
%ANNFUN2 neural network simulation function.
%
% Auto-generated by MATLAB, 14-Mar-2019 13:51:04.
% 
% [Y] = ANNFun2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [2 3 4];
x1_step2.xoffset = [0;0;0];
x1_step2.gain = [2000;2000;2000];
x1_step2.ymin = -1;

% Layer 1
b1 = [-2.241130333027610444;0.75013414975758674341;-1.6940872370822228632;-2.2930367151489980948;4.0736855087907519746;1.9844203048152084801;4.765199074692015202;-4.4718525616081636898;2.6207801913692678752;2.6852042312559682991];
IW1_1 = [-0.047293310207506378262 -0.005720307003888698387 -1.7860448071915671076;-0.067694951531572372661 0.32355755216989301459 1.1305586801316929169;-0.010427312298189118575 -1.6252616852982140205 0.071975121331766464539;-2.4520220678446955631 0.011416807666847904323 0.0083054376596822868106;2.5966974076656601511 0.10663312858386524151 1.056368314288133714;0.10735035610222280755 -0.02341941873510217445 2.2789381270124162704;-0.011564393214543479405 -0.014461082847843366797 4.1497461448798986794;0.0053748769044630563194 -3.8221108895955300255 0.028073605915890961771;2.1339206046782299708 -0.0065279556221860251392 -0.004448789669117061106;0.0036006985003720947194 1.7044136509925451595 -0.085217218380667633659];

% Layer 2
b2 = [-2.4305565483079161204;-5.5649620343933037248];
LW2_1 = [-2.8628965202203753293 -0.076285701507776484953 -0.76164270921571486372 0.99325943148750328593 0.3066201788062769551 -0.83296259929934501898 0.11016157976314375211 -1.8128724664366231423 3.008778074575803263 -3.5311715543998656308;0.22783604712974564466 0.089269811405147642125 -0.3830388933393935047 1.3426993001669227379 -0.042830026791257982954 0.23339969308548300098 1.5518489777419646192 -1.7925156366904166916 4.5440027966028972983 -0.42339550606096026941];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.34501976170285e-06;1.02157782296341e-06];
y1_step1.xoffset = [1108059;47617.11];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
